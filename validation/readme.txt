PhotoZ validation code

1. About

1.1 BEFORE CALLING THIS CODE!

2. Calling the code

3. data formats

4. tests + test data

5. More information

6. Plotting results from validation pipeline

1. ===== About this doc and the code =====
This doc describes how to call and use the photo-z validation code, photoz_metrics.py

Authors Ben Hoyle, Chris Bonnet.

Dependencies, 
numpy version 1.10.X
scipy version 0.16.1
pandas version 0.17.1
astropy version 1.0.7

If you cannot control your own python libraries, I recommend installing and using Canopy Enthought or Anaconda.

1.1. === BEFORE CALLING THIS CODE! ===

After you have made photo-z predictions, we still have to perform some post-processing to extract science samples from the predictions. E.g. the LSS group don't want anything outside of 0.6<MEAN_Z<1.0, and for WL we need to apply a set of WL weights.

there is a function to enable science sample selection, in the ../useful_code/
Call it like:

%>apply_science_sample_cuts.py Y1|LSS|WL pathToAllPredictions*.fits

Choose which science sample we are interested in either Y1 or LSS or WL

Some science samples require things like magnitudes or lensing weights. These must ALSO be included in the prediction files. Sorry this is a pain!

2.  === How to call the code ====
There is one way of calling the code:

1)

%>./photoz_metrics.py SCIENCE_SAMPLE PathToOutPutPickleFile.p LocationOfFitsFiles*.fits
e.g.

./photoz_metrics.py LSS_SAMPLE LSS.COADD.ADAZ.p /bensdir/allmypredictions/*.fits

Add the name LSS, or WL, or Y1 to the pickle file. This will enable smooth usage in the validation notebook.
SCIENCE_SAMPLE = LSS_SAMPLE | WL_SAMPLE | Y1_SAMPLE

-- currently depreciated.
2) %>./photoz_metrics.py  pdfFilePredictions.hdf5

This will run all of the battery of pdf tests, such as ks-tests etc.

For a detailed walkthrough of the code, run the ipython notebook
%>ipython notebook

and navigate to/ load the file
../notebooks/ValidationScriptExample.ipynb 


3. === Format of the files ===

3.1 Point predictions file
Point predictions file must be a fits file, and it must have the columns:

[upper-case]
COADD_OBJECTS_ID  
Z_MC    <-- this is sampled point from the pdf, used to construct dn/dz quickly
MEDIAN_Z  -- no-one realy cares about these that Ben knows about
MODE_Z -- no-one realy cares about these that Ben knows about
MEAN_Z
REDSHIFT -- "true" redshift of galaxy

[WEIGTHS, as generated by the select science sample]
Either 
IN_LSS_SAMPLE
IN_Y1_SAMPLE 
or for WL
IN_WL_SAMPLE, WEIGHT_ZLENS_0.2, WEIGHT_ZLENS_0.3,WEIGHT_ZLENS_0.4,WEIGHT_ZLENS_0.5,WEIGHT_ZLENS_0.6,WEIGHT_ZLENS_0.7, WEIGHT_ZLENS_0.8

It must also have any extra columns that you use in the test file, in the correct case.

3.2 pdf file
The pdf file must be a hdf5 file format, and it should have the extension /pdf/ for all the pdfs.
Other useful extensions are /bins/ and also /point_predictions/ which can also store point predictions
We column names should start with the bin centre , for exmaple PDF_0.025, PDF0.075, ...
Please also include the following in the DataFrame 
MODE_Z
MEAN_Z
REDSHIFT
MEDIAN_Z
Z_MC

You can also check out /validation/tests/create_testingdata.py to see how the unit test data has been made.

4. === Unit tests====
We perform a battery of unit tests on the metrics. Navigate to /validation/tests and run

%>nosetests

To perform all the unit tests. They should all (except 1) pass.

Test data.
Currently test data is randomised numbers, just so the codes check for the correct column names.
We could insert a known signal, and do an end to end test of the validation pipeline.

5. === More information ===
For an interactive demo open the ipython notebook

%>cd notebook/
%>ipython notebook

And then load/click on the ValidationScriptExample.ipynb

contact benhoyle1212@gmail.com, or see me in photo-z hipchat.

6. == Plotting results ===
enter the ../notebook/ directory and run
%>juypyter notebook

Then load this file:

Validation_metric_values_resampled_data.ipynb

And change the paths in the first cell:
--path = 'PathToYourphoto-zwgDir/validation/'

and then change "LSS.COADD.CODENAME.p" to be
YourResultPickelFile.p 

--path_to_pickle_output_file = path + 'YourResultPickelFile.p'

Then execute all the cells. Your plots will be shown in the bottom panels.
